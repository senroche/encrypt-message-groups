version: "2"
services:

    server:
        build: ./server
        restart: always
        container_name: server
        ports:
            - "${SERVER_PORT}:${SERVER_PORT}"
        volumes:
            - ./server:/server
        environment:
            - SERVER_PORT=${SERVER_PORT}
            - MONGO_CONNECTION_STRING=${MONGO_CONNECTION_STRING}
            - MONGO_CONNECTION_STRING_ADMIN=${MONGO_CONNECTION_STRING_ADMIN}
            # script to wait for mongo to be fully up & running
            - WAIT_HOSTS=db:${MONGO_PORT}
        depends_on:
            - db
#            - rasa
        restart: on-failure

    client:
        build: ./client
        restart: on-failure
        container_name: client
        ports:
            - "${REACT_APP_PORT}:${REACT_APP_PORT}"
        volumes:
            - ./client:/client
        depends_on:
#        - rasa
        - server
        restart: on-failure

    db:
        image: mongo:latest
        volumes:
            - $DATABASE_DATA:/$DATABASE_DATA
            # Put the script to initialise the database in the right directory withing mongo container
            # It will execute it on initialisation
            - ./initDB.js:/docker-entrypoint-initDB.d/initDB.js:ro
        environment:
            # to connect from cmd line run (read / write user) for root access use root user
            # mongo --port 27017 -u "user" -p "password" --authenticationDatabase "db"
            - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        ports:
            - "${MONGO_PORT}:${MONGO_PORT}"
        restart: on-failure
        expose:
            - ${MONGO_PORT}